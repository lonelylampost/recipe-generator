(()=>{var e,n,t={399:(e,n,t)=>{"use strict";t(654),t(738).config({path:"./env"});var r,o,i,a,l,c,d="f62e0927073f342ce",s=document.getElementById("para-el"),u=document.getElementById("nope-btn"),p=document.getElementById("descript-el"),A=document.getElementById("wikipedia-el"),f=document.getElementById("sign-off-el"),g=document.getElementById("wiki-img"),y=document.getElementById("google-el"),m=document.getElementById("recipes-el"),h=document.getElementById("extraL"),b=document.getElementById("extraR"),v=document.getElementById("left-btn"),I=document.getElementById("right-btn"),B=document.getElementById("one"),x=document.getElementById("two"),C=document.getElementById("three"),w=document.getElementById("comment-el"),k=document.getElementById("recipe-create"),E=document.getElementById("confirm-name"),j=document.getElementById("submit-btn"),T=document.getElementById("input-one"),O=document.getElementById("input-two"),S=document.getElementById("input-three"),Y=document.getElementById("input-oneT"),q=document.getElementById("input-twoT"),D=document.getElementById("input-threeT"),_=document.getElementById("big"),z=document.getElementById("words"),L=document.getElementById("darken-el"),N=document.getElementById("return-btn"),H=0,M=0,U=!1,Z=localStorage.getItem("doneTutorial"),P=localStorage.getItem("ingredientsList"),R=localStorage.getItem("recipesList"),$=JSON.parse(localStorage.getItem("keyNumHis")),W={0:"omelete","012":"pasta",123:"pasta with sauce","016":"custard","01":"fritatta","07":"fried rice","09":"fried vegetables",126:"pancakes","015":"french toast","024":"potato pancakes","05":"egg sandwich",4:"boiled potatoes",478:"bean soup",5:"toast",58:"beans on toast",9:"salad"},F={eggs:{type:"breakfast",ID:"0"},milk:{type:"drink",ID:"1"},flour:{type:"ingredient",ID:"2"},pasta:{type:"dinner",ID:"3"},potatoes:{type:"dinner",ID:"4"},bread:{type:"breakfast",ID:"5"},sugar:{type:"sweet",ID:"6"},rice:{type:"dinner",ID:"7"},beans:{type:"dinner",ID:"8"},vegetables:{type:"ingredient",ID:9}};function V(e){for(var n=0;n<3;n++){var t=e.items[n];y.append(document.createElement("div"),document.createTextNode(t.title),document.createTextNode(t.snippet),document.createTextNode(t.link))}void 0!==W[a]&&e&&(m.style.display="flex")}(c=document.createElement("script")).src="https://cse.google.com/cse.js?cx=".concat(d),c.setAttribute("type","text/javascript"),c.async=!0,document.head.appendChild(c),Z?(s.style.display="none",u.style.display="none"):(j.style.display="none",_.style.display="none",z.style.display="none"),P&&(B=P,x=P,C=P),R&&(W=R),M=$||0,u.addEventListener("click",(function(){0===H?(s.textContent="Well, you must have something lying around!",u.textContent="Nothing really...",H=1,U=!0,localStorage.setItem("doneTutorial",U)):1===H?(s.textContent="If you input some ingredients into my magic fridge, then it will come out with something that you can make!",u.textContent="Really!",H=2):2===H?(s.textContent="It will also explain what exactly it made, and list some recipes to recreate it!",u.textContent="Let me try!",H=3):3===H&&(s.style.display="none",u.style.display="none",j.style.display="flex",_.style.display="flex",z.style.display="flex")})),document.addEventListener("scroll",(function(){0!==H&&1!==H&&2!==H||(H=3,s.style.display="none",u.style.display="none",j.style.display="flex",_.style.display="flex",z.style.display="flex")})),v.addEventListener("click",(function(){var e=document.createElement("option");e.value=document.getElementById("add-ingredient").value,B.appendChild(e);var n=document.createElement("option");n.value=document.getElementById("add-ingredient").value,x.appendChild(n);var t=document.createElement("option");t.value=document.getElementById("add-ingredient").value,C.appendChild(t),localStorage.setItem("ingredientsList",B),function(){if(h.firstChild)for(var e=0;e<document.getElementById("one").options.length-1;e++)h.removeChild(h.lastChild);for(var n=0;n<document.getElementById("one").options.length;n++)(l=document.createElement("div")).innerText=document.getElementById("one").options[n].value,l.style.display="flex",l.style.background="burlywood",l.style.color="black",h.append(l)}()})),I.addEventListener("click",(function(){L.style.display="block",k.style.display="flex"})),window.onclick=function(e){e.target==L&&(L.style.display="none")},N.addEventListener("click",(function(){L.style.display="none",k.style.display="none"})),E.addEventListener("click",(function(){!function(){for(var e,n,t,r,o=0;o<document.getElementById("one").options.length;o++)Y.value===document.getElementById("one").options[o].value&&(n=(n=o).toString()),q.value===document.getElementById("two").options[o].value&&(t=(t=o).toString()),D.value===document.getElementById("three").options[o].value&&(r=(r=o).toString());"string"==typeof n&&"string"==typeof t&&"string"==typeof r?e=n+t+r:"string"!=typeof n&&"string"!=typeof n&&"string"==typeof n?e=r:"string"!=typeof n&&"string"==typeof n&&"string"==typeof n?e=t+r:"string"==typeof n&&"string"!=typeof n&&"string"==typeof n?e=n+r:"string"==typeof n&&"string"!=typeof n&&"string"!=typeof n?e=n:"string"!=typeof n&&"string"==typeof n&&"string"!=typeof n?e=t:"string"==typeof n&&"string"==typeof n&&"string"!=typeof n&&(e=n+t),W["".concat(e)]=document.getElementById("recipe-name").value,function(){if(b.firstChild)for(var e=0;e<Object.keys(W).length;e++)b.removeChild(b.lastChild);for(var n=0;n<Object.keys(W).length;n++)(l=document.createElement("div")).innerText=W[Object.keys(W)[n]],l.style.display="flex",l.style.background="burlywood",l.style.color="black",b.append(l)}()}(),k.style.display="none",localStorage.setItem("recipesList",W)})),function(){for(var e=0;e<document.getElementById("one").options.length;e++)(l=document.createElement("div")).innerText=document.getElementById("one").options[e].value,l.style.display="flex",l.style.background="burlywood",l.style.color="black",h.append(l)}(),function(){for(var e=0;e<Object.keys(W).length;e++)(l=document.createElement("div")).innerText=W[Object.keys(W)[e]],l.style.display="flex",l.style.background="burlywood",l.style.color="black",b.append(l)}(),window.hndlr=V,j.addEventListener("click",(function(){if(y.firstChild)for(var e=0;e<12;e++)y.removeChild(y.lastChild);var n,t;!function(){p.innerText="What is";for(var e=0;e<document.getElementById("one").options.length;e++)T.value===document.getElementById("one").options[e].value&&(r=(r=e).toString()),O.value===document.getElementById("two").options[e].value&&(o=(o=e).toString()),S.value===document.getElementById("three").options[e].value&&(i=(i=e).toString());"string"==typeof r&&"string"==typeof o&&"string"==typeof i?(a=r+o+i,p.innerText+=" "+W[a]+"?"):"string"!=typeof r&&"string"!=typeof r&&"string"==typeof r?(a=i,p.innerText+=" "+W[a]+"?"):"string"!=typeof r&&"string"==typeof r&&"string"==typeof r?(a=o+i,p.innerText+=" "+W[a]+"?"):"string"==typeof r&&"string"!=typeof r&&"string"==typeof r?(a=r+i,p.innerText+=" "+W[a]+"?"):"string"==typeof r&&"string"!=typeof r&&"string"!=typeof r?(a=r,p.innerText+=" "+W[a]+"?"):"string"!=typeof r&&"string"==typeof r&&"string"!=typeof r?(a=o,p.innerText+=" "+W[a]+"?"):"string"==typeof r&&"string"==typeof r&&"string"!=typeof r&&(a=r+o,p.innerText+=" "+W[a]+"?")}(),n=W[a]+"_recipe",(t=document.createElement("script")).src="https://www.googleapis.com/customsearch/v1?key=".concat("AIzaSyA7Ki1nMDbtUjj8iHDwA8aDMr4JCNMTs7c","&cx=").concat(d,"&omuauf_lfve&q=").concat(n,"&callback=hndlr"),document.head.appendChild(t),function(){for(var e=0;e<Object.keys(F).length;e++)Object.values(F)[e].ID!==r&&Object.values(F)[e].ID!==o&&Object.values(F)[e].ID!==i||("dinner"===Object.values(F)[e].type?w.innerText="A hearty meal.":"breakfast"===Object.values(F)[e].type?w.innerText="A morning meal.":"sweet"===Object.values(F)[e].type?w.innerText="Sweet tooth!":"drink"===Object.values(F)[e].type?w.innerText="Take it with you!":"ingredient"===Object.values(F)[e].type&&(w.innerText="What does it make?"),w.style.display="flex")}(),function(){if(M+=1,localStorage.setItem("keyNumHis",M),M>=100)console.log("keys exceeded");else{var e=W[a];void 0!==e&&(n="https://en.wikipedia.org/w/api.php?action=query&prop=pageimages&format=json&piprop=original&origin=*&titles=".concat(e),fetch(n).then((function(e){e.json().then((function(e){!function(e){var n=Object.keys(e.query.pages)[0],t=e.query.pages[n].original.source;console.log(t),g.src=t}(e)}))})).catch((function(e){console.log("Fetch Error :-S",e)})))}var n}(),function(){if(M+=1,console.log(M),localStorage.setItem("keyNumHis",M),M>=100)console.log("keys exceeded");else{var e=W[a];void 0!==e&&(n="https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro&explaintext&redirects=1&origin=*&titles=".concat(e),fetch(n).then((function(n){n.json().then((function(n){!function(n){var t=Object.keys(n.query.pages)[0],r=n.query.pages[t].extract;console.log(r),A.innerText=r,void 0!==e&&n&&(p.style.display="block",f.style.display="block",A.style.display="block")}(n)}))})).catch((function(e){console.log("Fetch Error :-S",e)})))}var n}(),V()}))},426:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>l});var r=t(537),o=t.n(r),i=t(645),a=t.n(i)()(o());a.push([e.id,"* {\n    background: darkred;\n    color: burlywood;\n    margin: 0;\n    font-family: Georgia, 'Times New Roman', Times, serif;\n    box-sizing: border-box;\n}\n\n#main {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n}\n\nul {\n    list-style: none;\n}\n\na {\n    text-decoration: none;\n}\n\nimg {\n    height: 100px;\n}\n\n/*//////////////////////*/\n\n\n#para-el {\n    display: flex;\n    font-size: 50px;\n    text-align: center;\n    margin-bottom: 40px;\n}\n\n#nope-btn {\n    display: flex;\n    color: burlywood;\n    text-align: center;\n    font-size: 50px;\n    font-weight: 800;\n    border: none;\n    cursor: pointer;\n    outline: none;\n    padding: 20px 30px 25px;\n    border: 3px solid rgb(100, 0, 0);\n    border-radius: 10px;\n}\n\n#nope-btn:hover {\n    border: 1px solid burlywood;\n}\n\n#nope-btn:active {\n    border: 1px solid burlywood;\n}\n\n/*//////////////////////*/\n\n#fridge-el {\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n    margin: 50px 50px 0;\n    border: 4px solid gray;\n    padding: 40px 20px;\n    background: darkgrey;\n}\n\n#rotate-el input {\n    border: 2px solid burlywood;\n    border-radius: 12px;\n    padding: 4px 10px;\n    background: burlywood;\n    color: black;\n    text-align: center;\n}\n\ninput:focus {\n    transition-duration: 0.4s;\n    border: 2px solid rgb(141, 117, 85);\n}\n\n#feet-el {\n    height: 20px;\n    display: flex;\n    justify-content: space-around;\n}\n\n#foot {\n    height: 20px;\n    width: 20px;\n    background: gray;\n}\n\n#submit-btn {\n    font-size: 20px;\n    border-radius: 4px;\n    border: 1px solid rgb(141, 117, 85);\n    background: rgb(82, 0, 0);\n    margin: 20px;\n    cursor: pointer;\n    outline: none;\n    box-shadow: 0 5px 0 rgba(0,0,0, 0.45);\n}\n\n#submit-btn:hover {\n    transition-duration: 0.1s;\n    background: rgb(49, 0, 0);\n}\n\n#submit-btn:active {\n    background: rgb(49, 0, 0);\n    box-shadow: 1px 1px 1px rgba(0,0,0, 0.45);\n    transform: translateY(1px);\n}\n\n#descript-el {\n    display: none;\n    flex-direction: column;\n    font-size: 25px;\n    margin: 20px;\n\n}\n\n.sides {\n    background: burlywood;\n    display: flex;\n    width: 150px;\n    align-items: center;\n    margin: 50px 0;\n    border: 10px solid gray;\n    flex-direction: column;\n    overflow-x:hidden;\n    overflow-y:auto; \n}\n\n.title {\n    background: burlywood;\n    color: black;\n}\n\n#big {\n    display: flex;\n    justify-content: space-around;\n}\n\n#wikipedia-el {\n    display:none;\n    font-size: 15px;\n    justify-content: center;\n    border: 5px solid grey;\n    border-radius: 4px;\n    background: burlywood;\n    color: black;\n    width: 50%;\n}\n\n#words {\n    font-size: 50px;\n    color: burlywood;\n    display: flex;\n    justify-content: center;\n}\n\n#sign-off-el {\n    display:none;\n    align-items: flex-end;\n}\n\n#recipes-el {\n    display: none;\n    font-size: 25px;\n    margin: 20px;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 90%;\n}\n\n#darken-el {\n    display: none; \n    position: fixed;\n    z-index: 1; \n    left: 0;\n    top: 0;\n    width: 100%; \n    height: 100%; \n    overflow: auto;\n    background-color: rgba(0,0,0,0.4); \n}\n\n#create-des {\n    background: burlywood;\n    color: black;\n    margin-bottom: 10px;\n}\n\n#recipe-create {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    z-index: 2;\n    margin: 15% auto;\n    padding: 20px;\n    border: 3px solid gray;\n    gap: 10px;\n    width: 50%;\n    background: burlywood;\n}\n\n#recipe-input {\n    display: flex;\n    background: burlywood;\n    color: black;\n    margin: 10px;\n}\n\n#ingredient-input {\n    display: flex;\n    background: burlywood;\n    color: black;\n    margin: 10px;\n}\n\n#add-recipe {\n    display: flex;\n    flex: 2;\n    background: burlywood;\n    width: 100px;\n    color: black;\n}\n\n#add-ingredient {\n    display: flex;\n    flex: 2;\n    background: burlywood;\n    width: 100px;\n    color: black;\n}\n\n\n\n.submit-input {\n    display: flex;\n    background: burlywood;\n    width: 20px;\n    color: black;\n    justify-content: center;\n}\n\n#google-el #text {\n    max-width: 50%;\n    overflow-wrap: normal;\n}\n\n#google-el {\n    display:flex;\n    font-size: 15px;\n    justify-content: center;\n    border: 5px solid grey;\n    border-radius: 4px;\n    background: burlywood;\n    color: black;\n    width: fit-content;\n    align-items: center;\n    gap: 10px;\n}\n\n#google-el div {\n    display:flex;\n    font-size: 15px;\n    justify-content: center;\n    border-radius: 4px;\n    background: burlywood;\n    color: black;\n    width: 50%;\n}\n\n#right-btn {\n    width: fit-content;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:["* {\n    background: darkred;\n    color: burlywood;\n    margin: 0;\n    font-family: Georgia, 'Times New Roman', Times, serif;\n    box-sizing: border-box;\n}\n\n#main {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n}\n\nul {\n    list-style: none;\n}\n\na {\n    text-decoration: none;\n}\n\nimg {\n    height: 100px;\n}\n\n/*//////////////////////*/\n\n\n#para-el {\n    display: flex;\n    font-size: 50px;\n    text-align: center;\n    margin-bottom: 40px;\n}\n\n#nope-btn {\n    display: flex;\n    color: burlywood;\n    text-align: center;\n    font-size: 50px;\n    font-weight: 800;\n    border: none;\n    cursor: pointer;\n    outline: none;\n    padding: 20px 30px 25px;\n    border: 3px solid rgb(100, 0, 0);\n    border-radius: 10px;\n}\n\n#nope-btn:hover {\n    border: 1px solid burlywood;\n}\n\n#nope-btn:active {\n    border: 1px solid burlywood;\n}\n\n/*//////////////////////*/\n\n#fridge-el {\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n    margin: 50px 50px 0;\n    border: 4px solid gray;\n    padding: 40px 20px;\n    background: darkgrey;\n}\n\n#rotate-el input {\n    border: 2px solid burlywood;\n    border-radius: 12px;\n    padding: 4px 10px;\n    background: burlywood;\n    color: black;\n    text-align: center;\n}\n\ninput:focus {\n    transition-duration: 0.4s;\n    border: 2px solid rgb(141, 117, 85);\n}\n\n#feet-el {\n    height: 20px;\n    display: flex;\n    justify-content: space-around;\n}\n\n#foot {\n    height: 20px;\n    width: 20px;\n    background: gray;\n}\n\n#submit-btn {\n    font-size: 20px;\n    border-radius: 4px;\n    border: 1px solid rgb(141, 117, 85);\n    background: rgb(82, 0, 0);\n    margin: 20px;\n    cursor: pointer;\n    outline: none;\n    box-shadow: 0 5px 0 rgba(0,0,0, 0.45);\n}\n\n#submit-btn:hover {\n    transition-duration: 0.1s;\n    background: rgb(49, 0, 0);\n}\n\n#submit-btn:active {\n    background: rgb(49, 0, 0);\n    box-shadow: 1px 1px 1px rgba(0,0,0, 0.45);\n    transform: translateY(1px);\n}\n\n#descript-el {\n    display: none;\n    flex-direction: column;\n    font-size: 25px;\n    margin: 20px;\n\n}\n\n.sides {\n    background: burlywood;\n    display: flex;\n    width: 150px;\n    align-items: center;\n    margin: 50px 0;\n    border: 10px solid gray;\n    flex-direction: column;\n    overflow-x:hidden;\n    overflow-y:auto; \n}\n\n.title {\n    background: burlywood;\n    color: black;\n}\n\n#big {\n    display: flex;\n    justify-content: space-around;\n}\n\n#wikipedia-el {\n    display:none;\n    font-size: 15px;\n    justify-content: center;\n    border: 5px solid grey;\n    border-radius: 4px;\n    background: burlywood;\n    color: black;\n    width: 50%;\n}\n\n#words {\n    font-size: 50px;\n    color: burlywood;\n    display: flex;\n    justify-content: center;\n}\n\n#sign-off-el {\n    display:none;\n    align-items: flex-end;\n}\n\n#recipes-el {\n    display: none;\n    font-size: 25px;\n    margin: 20px;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    width: 90%;\n}\n\n#darken-el {\n    display: none; \n    position: fixed;\n    z-index: 1; \n    left: 0;\n    top: 0;\n    width: 100%; \n    height: 100%; \n    overflow: auto;\n    background-color: rgba(0,0,0,0.4); \n}\n\n#create-des {\n    background: burlywood;\n    color: black;\n    margin-bottom: 10px;\n}\n\n#recipe-create {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    z-index: 2;\n    margin: 15% auto;\n    padding: 20px;\n    border: 3px solid gray;\n    gap: 10px;\n    width: 50%;\n    background: burlywood;\n}\n\n#recipe-input {\n    display: flex;\n    background: burlywood;\n    color: black;\n    margin: 10px;\n}\n\n#ingredient-input {\n    display: flex;\n    background: burlywood;\n    color: black;\n    margin: 10px;\n}\n\n#add-recipe {\n    display: flex;\n    flex: 2;\n    background: burlywood;\n    width: 100px;\n    color: black;\n}\n\n#add-ingredient {\n    display: flex;\n    flex: 2;\n    background: burlywood;\n    width: 100px;\n    color: black;\n}\n\n\n\n.submit-input {\n    display: flex;\n    background: burlywood;\n    width: 20px;\n    color: black;\n    justify-content: center;\n}\n\n#google-el #text {\n    max-width: 50%;\n    overflow-wrap: normal;\n}\n\n#google-el {\n    display:flex;\n    font-size: 15px;\n    justify-content: center;\n    border: 5px solid grey;\n    border-radius: 4px;\n    background: burlywood;\n    color: black;\n    width: fit-content;\n    align-items: center;\n    gap: 10px;\n}\n\n#google-el div {\n    display:flex;\n    font-size: 15px;\n    justify-content: center;\n    border-radius: 4px;\n    background: burlywood;\n    color: black;\n    width: 50%;\n}\n\n#right-btn {\n    width: fit-content;\n}"],sourceRoot:""}]);const l=a},645:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var l=0;l<this.length;l++){var c=this[l][0];null!=c&&(a[c]=!0)}for(var d=0;d<e.length;d++){var s=[].concat(e[d]);r&&a[s[0]]||(void 0!==i&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=i),t&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=t):s[2]=t),o&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=o):s[4]="".concat(o)),n.push(s))}},n}},537:e=>{"use strict";e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},738:(e,n,t)=>{var r=t(155);const o=t(647),i=t(470),a=t(435),l=t(968).version,c=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/gm;function d(e){console.log(`[dotenv@${l}][DEBUG] ${e}`)}const s={config:function(e){let n=i.resolve(r.cwd(),".env"),t="utf8";const l=Boolean(e&&e.debug),c=Boolean(e&&e.override);var u;e&&(null!=e.path&&(n="~"===(u=e.path)[0]?i.join(a.homedir(),u.slice(1)):u),null!=e.encoding&&(t=e.encoding));try{const e=s.parse(o.readFileSync(n,{encoding:t}));return Object.keys(e).forEach((function(n){Object.prototype.hasOwnProperty.call("MISSING_ENV_VAR",n)?(!0===c&&e[n],l&&d(!0===c?`"${n}" is already defined in \`process.env\` and WAS overwritten`:`"${n}" is already defined in \`process.env\` and was NOT overwritten`)):e[n]})),{parsed:e}}catch(e){return l&&d(`Failed to load ${n} ${e.message}`),{error:e}}},parse:function(e){const n={};let t,r=e.toString();for(r=r.replace(/\r\n?/gm,"\n");null!=(t=c.exec(r));){const e=t[1];let r=t[2]||"";r=r.trim();const o=r[0];r=r.replace(/^(['"`])([\s\S]*)\1$/gm,"$2"),'"'===o&&(r=r.replace(/\\n/g,"\n"),r=r.replace(/\\r/g,"\r")),n[e]=r}return n}};e.exports.config=s.config,e.exports.parse=s.parse,e.exports=s},435:(e,n)=>{n.endianness=function(){return"LE"},n.hostname=function(){return"undefined"!=typeof location?location.hostname:""},n.loadavg=function(){return[]},n.uptime=function(){return 0},n.freemem=function(){return Number.MAX_VALUE},n.totalmem=function(){return Number.MAX_VALUE},n.cpus=function(){return[]},n.type=function(){return"Browser"},n.release=function(){return"undefined"!=typeof navigator?navigator.appVersion:""},n.networkInterfaces=n.getNetworkInterfaces=function(){return{}},n.arch=function(){return"javascript"},n.platform=function(){return"browser"},n.tmpdir=n.tmpDir=function(){return"/tmp"},n.EOL="\n",n.homedir=function(){return"/"}},470:(e,n,t)=>{"use strict";var r=t(155);function o(e){if("string"!=typeof e)throw new TypeError("Path must be a string. Received "+JSON.stringify(e))}function i(e,n){for(var t,r="",o=0,i=-1,a=0,l=0;l<=e.length;++l){if(l<e.length)t=e.charCodeAt(l);else{if(47===t)break;t=47}if(47===t){if(i===l-1||1===a);else if(i!==l-1&&2===a){if(r.length<2||2!==o||46!==r.charCodeAt(r.length-1)||46!==r.charCodeAt(r.length-2))if(r.length>2){var c=r.lastIndexOf("/");if(c!==r.length-1){-1===c?(r="",o=0):o=(r=r.slice(0,c)).length-1-r.lastIndexOf("/"),i=l,a=0;continue}}else if(2===r.length||1===r.length){r="",o=0,i=l,a=0;continue}n&&(r.length>0?r+="/..":r="..",o=2)}else r.length>0?r+="/"+e.slice(i+1,l):r=e.slice(i+1,l),o=l-i-1;i=l,a=0}else 46===t&&-1!==a?++a:a=-1}return r}var a={resolve:function(){for(var e,n="",t=!1,a=arguments.length-1;a>=-1&&!t;a--){var l;a>=0?l=arguments[a]:(void 0===e&&(e=r.cwd()),l=e),o(l),0!==l.length&&(n=l+"/"+n,t=47===l.charCodeAt(0))}return n=i(n,!t),t?n.length>0?"/"+n:"/":n.length>0?n:"."},normalize:function(e){if(o(e),0===e.length)return".";var n=47===e.charCodeAt(0),t=47===e.charCodeAt(e.length-1);return 0!==(e=i(e,!n)).length||n||(e="."),e.length>0&&t&&(e+="/"),n?"/"+e:e},isAbsolute:function(e){return o(e),e.length>0&&47===e.charCodeAt(0)},join:function(){if(0===arguments.length)return".";for(var e,n=0;n<arguments.length;++n){var t=arguments[n];o(t),t.length>0&&(void 0===e?e=t:e+="/"+t)}return void 0===e?".":a.normalize(e)},relative:function(e,n){if(o(e),o(n),e===n)return"";if((e=a.resolve(e))===(n=a.resolve(n)))return"";for(var t=1;t<e.length&&47===e.charCodeAt(t);++t);for(var r=e.length,i=r-t,l=1;l<n.length&&47===n.charCodeAt(l);++l);for(var c=n.length-l,d=i<c?i:c,s=-1,u=0;u<=d;++u){if(u===d){if(c>d){if(47===n.charCodeAt(l+u))return n.slice(l+u+1);if(0===u)return n.slice(l+u)}else i>d&&(47===e.charCodeAt(t+u)?s=u:0===u&&(s=0));break}var p=e.charCodeAt(t+u);if(p!==n.charCodeAt(l+u))break;47===p&&(s=u)}var A="";for(u=t+s+1;u<=r;++u)u!==r&&47!==e.charCodeAt(u)||(0===A.length?A+="..":A+="/..");return A.length>0?A+n.slice(l+s):(l+=s,47===n.charCodeAt(l)&&++l,n.slice(l))},_makeLong:function(e){return e},dirname:function(e){if(o(e),0===e.length)return".";for(var n=e.charCodeAt(0),t=47===n,r=-1,i=!0,a=e.length-1;a>=1;--a)if(47===(n=e.charCodeAt(a))){if(!i){r=a;break}}else i=!1;return-1===r?t?"/":".":t&&1===r?"//":e.slice(0,r)},basename:function(e,n){if(void 0!==n&&"string"!=typeof n)throw new TypeError('"ext" argument must be a string');o(e);var t,r=0,i=-1,a=!0;if(void 0!==n&&n.length>0&&n.length<=e.length){if(n.length===e.length&&n===e)return"";var l=n.length-1,c=-1;for(t=e.length-1;t>=0;--t){var d=e.charCodeAt(t);if(47===d){if(!a){r=t+1;break}}else-1===c&&(a=!1,c=t+1),l>=0&&(d===n.charCodeAt(l)?-1==--l&&(i=t):(l=-1,i=c))}return r===i?i=c:-1===i&&(i=e.length),e.slice(r,i)}for(t=e.length-1;t>=0;--t)if(47===e.charCodeAt(t)){if(!a){r=t+1;break}}else-1===i&&(a=!1,i=t+1);return-1===i?"":e.slice(r,i)},extname:function(e){o(e);for(var n=-1,t=0,r=-1,i=!0,a=0,l=e.length-1;l>=0;--l){var c=e.charCodeAt(l);if(47!==c)-1===r&&(i=!1,r=l+1),46===c?-1===n?n=l:1!==a&&(a=1):-1!==n&&(a=-1);else if(!i){t=l+1;break}}return-1===n||-1===r||0===a||1===a&&n===r-1&&n===t+1?"":e.slice(n,r)},format:function(e){if(null===e||"object"!=typeof e)throw new TypeError('The "pathObject" argument must be of type Object. Received type '+typeof e);return function(e,n){var t=n.dir||n.root,r=n.base||(n.name||"")+(n.ext||"");return t?t===n.root?t+r:t+"/"+r:r}(0,e)},parse:function(e){o(e);var n={root:"",dir:"",base:"",ext:"",name:""};if(0===e.length)return n;var t,r=e.charCodeAt(0),i=47===r;i?(n.root="/",t=1):t=0;for(var a=-1,l=0,c=-1,d=!0,s=e.length-1,u=0;s>=t;--s)if(47!==(r=e.charCodeAt(s)))-1===c&&(d=!1,c=s+1),46===r?-1===a?a=s:1!==u&&(u=1):-1!==a&&(u=-1);else if(!d){l=s+1;break}return-1===a||-1===c||0===u||1===u&&a===c-1&&a===l+1?-1!==c&&(n.base=n.name=0===l&&i?e.slice(1,c):e.slice(l,c)):(0===l&&i?(n.name=e.slice(1,a),n.base=e.slice(1,c)):(n.name=e.slice(l,a),n.base=e.slice(l,c)),n.ext=e.slice(a,c)),l>0?n.dir=e.slice(0,l-1):i&&(n.dir="/"),n},sep:"/",delimiter:":",win32:null,posix:null};a.posix=a,e.exports=a},155:e=>{var n,t,r=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{t="function"==typeof clearTimeout?clearTimeout:i}catch(e){t=i}}();var l,c=[],d=!1,s=-1;function u(){d&&l&&(d=!1,l.length?c=l.concat(c):s=-1,c.length&&p())}function p(){if(!d){var e=a(u);d=!0;for(var n=c.length;n;){for(l=c,c=[];++s<n;)l&&l[s].run();s=-1,n=c.length}l=null,d=!1,function(e){if(t===clearTimeout)return clearTimeout(e);if((t===i||!t)&&clearTimeout)return t=clearTimeout,clearTimeout(e);try{t(e)}catch(n){try{return t.call(null,e)}catch(n){return t.call(this,e)}}}(e)}}function A(e,n){this.fun=e,this.array=n}function f(){}r.nextTick=function(e){var n=new Array(arguments.length-1);if(arguments.length>1)for(var t=1;t<arguments.length;t++)n[t-1]=arguments[t];c.push(new A(e,n)),1!==c.length||d||a(p)},A.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=f,r.addListener=f,r.once=f,r.off=f,r.removeListener=f,r.removeAllListeners=f,r.emit=f,r.prependListener=f,r.prependOnceListener=f,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},654:(e,n,t)=>{"use strict";var r=t(379),o=t.n(r),i=t(795),a=t.n(i),l=t(569),c=t.n(l),d=t(565),s=t.n(d),u=t(216),p=t.n(u),A=t(589),f=t.n(A),g=t(426),y={};y.styleTagTransform=f(),y.setAttributes=s(),y.insert=c().bind(null,"head"),y.domAPI=a(),y.insertStyleElement=p();var m=o()(g.default,y);if(!g.default.locals||e.hot.invalidate){var h=!g.default.locals,b=h?g:g.default.locals;e.hot.accept(426,(n=>{g=t(426),function(e,n,t){if(!e&&n||e&&!n)return!1;var r;for(r in e)if((!t||"default"!==r)&&e[r]!==n[r])return!1;for(r in n)if(!(t&&"default"===r||e[r]))return!1;return!0}(b,h?g:g.default.locals,h)?(b=h?g:g.default.locals,m(g.default)):e.hot.invalidate()}))}e.hot.dispose((function(){m()})),g.default&&g.default.locals&&g.default.locals},379:e=>{"use strict";var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var i={},a=[],l=0;l<e.length;l++){var c=e[l],d=r.base?c[0]+r.base:c[0],s=i[d]||0,u="".concat(d," ").concat(s);i[d]=s+1;var p=t(u),A={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)n[p].references++,n[p].updater(A);else{var f=o(A,r);r.byIndex=l,n.splice(l,0,{identifier:u,updater:f,references:1})}a.push(u)}return a}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var l=t(i[a]);n[l].references--}for(var c=r(e,o),d=0;d<i.length;d++){var s=t(i[d]);0===n[s].references&&(n[s].updater(),n.splice(s,1))}i=c}}},569:e=>{"use strict";var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{"use strict";e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{"use strict";e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{"use strict";e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{"use strict";e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},647:()=>{},968:e=>{"use strict";e.exports=JSON.parse('{"name":"dotenv","version":"16.0.3","description":"Loads environment variables from .env file","main":"lib/main.js","types":"lib/main.d.ts","exports":{".":{"require":"./lib/main.js","types":"./lib/main.d.ts","default":"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},"scripts":{"dts-check":"tsc --project tests/types/tsconfig.json","lint":"standard","lint-readme":"standard-markdown","pretest":"npm run lint && npm run dts-check","test":"tap tests/*.js --100 -Rspec","prerelease":"npm test","release":"standard-version"},"repository":{"type":"git","url":"git://github.com/motdotla/dotenv.git"},"keywords":["dotenv","env",".env","environment","variables","config","settings"],"readmeFilename":"README.md","license":"BSD-2-Clause","devDependencies":{"@types/node":"^17.0.9","decache":"^4.6.1","dtslint":"^3.7.0","sinon":"^12.0.1","standard":"^16.0.4","standard-markdown":"^7.1.0","standard-version":"^9.3.2","tap":"^15.1.6","tar":"^6.1.11","typescript":"^4.5.4"},"engines":{"node":">=12"}}')}},r={};function o(e){var n=r[e];if(void 0!==n){if(void 0!==n.error)throw n.error;return n.exports}var i=r[e]={id:e,exports:{}};try{var a={id:e,module:i,factory:t[e],require:o};o.i.forEach((function(e){e(a)})),i=a.module,a.factory.call(i.exports,i,i.exports,a.require)}catch(e){throw i.error=e,e}return i.exports}o.m=t,o.c=r,o.i=[],o.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return o.d(n,{a:n}),n},o.d=(e,n)=>{for(var t in n)o.o(n,t)&&!o.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},o.hu=e=>e+"."+o.h()+".hot-update.js",o.hmrF=()=>"main."+o.h()+".hot-update.json",o.h=()=>"389380146042d2b9e601",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),e={},n="recipes:",o.l=(t,r,i,a)=>{if(e[t])e[t].push(r);else{var l,c;if(void 0!==i)for(var d=document.getElementsByTagName("script"),s=0;s<d.length;s++){var u=d[s];if(u.getAttribute("src")==t||u.getAttribute("data-webpack")==n+i){l=u;break}}l||(c=!0,(l=document.createElement("script")).charset="utf-8",l.timeout=120,o.nc&&l.setAttribute("nonce",o.nc),l.setAttribute("data-webpack",n+i),l.src=t),e[t]=[r];var p=(n,r)=>{l.onerror=l.onload=null,clearTimeout(A);var o=e[t];if(delete e[t],l.parentNode&&l.parentNode.removeChild(l),o&&o.forEach((e=>e(r))),n)return n(r)},A=setTimeout(p.bind(null,void 0,{type:"timeout",target:l}),12e4);l.onerror=p.bind(null,l.onerror),l.onload=p.bind(null,l.onload),c&&document.head.appendChild(l)}},o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e,n,t,r={},i=o.c,a=[],l=[],c="idle",d=0,s=[];function u(e){c=e;for(var n=[],t=0;t<l.length;t++)n[t]=l[t].call(null,e);return Promise.all(n)}function p(){0==--d&&u("ready").then((function(){if(0===d){var e=s;s=[];for(var n=0;n<e.length;n++)e[n]()}}))}function A(e){if("idle"!==c)throw new Error("check() is only allowed in idle status");return u("check").then(o.hmrM).then((function(t){return t?u("prepare").then((function(){var r=[];return n=[],Promise.all(Object.keys(o.hmrC).reduce((function(e,i){return o.hmrC[i](t.c,t.r,t.m,e,n,r),e}),[])).then((function(){return n=function(){return e?g(e):u("ready").then((function(){return r}))},0===d?n():new Promise((function(e){s.push((function(){e(n())}))}));var n}))})):u(y()?"ready":"idle").then((function(){return null}))}))}function f(e){return"ready"!==c?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+c+")")})):g(e)}function g(e){e=e||{},y();var r=n.map((function(n){return n(e)}));n=void 0;var o=r.map((function(e){return e.error})).filter(Boolean);if(o.length>0)return u("abort").then((function(){throw o[0]}));var i=u("dispose");r.forEach((function(e){e.dispose&&e.dispose()}));var a,l=u("apply"),c=function(e){a||(a=e)},d=[];return r.forEach((function(e){if(e.apply){var n=e.apply(c);if(n)for(var t=0;t<n.length;t++)d.push(n[t])}})),Promise.all([i,l]).then((function(){return a?u("fail").then((function(){throw a})):t?g(e).then((function(e){return d.forEach((function(n){e.indexOf(n)<0&&e.push(n)})),e})):u("idle").then((function(){return d}))}))}function y(){if(t)return n||(n=[]),Object.keys(o.hmrI).forEach((function(e){t.forEach((function(t){o.hmrI[e](t,n)}))})),t=void 0,!0}o.hmrD=r,o.i.push((function(s){var g,y,m,h,b=s.module,v=function(n,t){var r=i[t];if(!r)return n;var o=function(o){if(r.hot.active){if(i[o]){var l=i[o].parents;-1===l.indexOf(t)&&l.push(t)}else a=[t],e=o;-1===r.children.indexOf(o)&&r.children.push(o)}else console.warn("[HMR] unexpected require("+o+") from disposed module "+t),a=[];return n(o)},l=function(e){return{configurable:!0,enumerable:!0,get:function(){return n[e]},set:function(t){n[e]=t}}};for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&"e"!==s&&Object.defineProperty(o,s,l(s));return o.e=function(e){return function(e){switch(c){case"ready":u("prepare");case"prepare":return d++,e.then(p,p),e;default:return e}}(n.e(e))},o}(s.require,s.id);b.hot=(g=s.id,y=b,h={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:m=e!==g,_requireSelf:function(){a=y.parents.slice(),e=m?void 0:g,o(g)},active:!0,accept:function(e,n,t){if(void 0===e)h._selfAccepted=!0;else if("function"==typeof e)h._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)h._acceptedDependencies[e[r]]=n||function(){},h._acceptedErrorHandlers[e[r]]=t;else h._acceptedDependencies[e]=n||function(){},h._acceptedErrorHandlers[e]=t},decline:function(e){if(void 0===e)h._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var n=0;n<e.length;n++)h._declinedDependencies[e[n]]=!0;else h._declinedDependencies[e]=!0},dispose:function(e){h._disposeHandlers.push(e)},addDisposeHandler:function(e){h._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=h._disposeHandlers.indexOf(e);n>=0&&h._disposeHandlers.splice(n,1)},invalidate:function(){switch(this._selfInvalidated=!0,c){case"idle":n=[],Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](g,n)})),u("ready");break;case"ready":Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](g,n)}));break;case"prepare":case"check":case"dispose":case"apply":(t=t||[]).push(g)}},check:A,apply:f,status:function(e){if(!e)return c;l.push(e)},addStatusHandler:function(e){l.push(e)},removeStatusHandler:function(e){var n=l.indexOf(e);n>=0&&l.splice(n,1)},data:r[g]},e=void 0,h),b.parents=a,b.children=[],a=[],s.require=v})),o.hmrC={},o.hmrI={}})(),(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var n=o.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var t=n.getElementsByTagName("script");t.length&&(e=t[t.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),(()=>{var e,n,t,r,i,a=o.hmrS_jsonp=o.hmrS_jsonp||{179:0},l={};function c(n,t){return e=t,new Promise(((e,t)=>{l[n]=e;var r=o.p+o.hu(n),i=new Error;o.l(r,(e=>{if(l[n]){l[n]=void 0;var r=e&&("load"===e.type?"missing":e.type),o=e&&e.target&&e.target.src;i.message="Loading hot update chunk "+n+" failed.\n("+r+": "+o+")",i.name="ChunkLoadError",i.type=r,i.request=o,t(i)}}))}))}function d(e){function l(e){for(var n=[e],t={},r=n.map((function(e){return{chain:[e],id:e}}));r.length>0;){var i=r.pop(),a=i.id,l=i.chain,d=o.c[a];if(d&&(!d.hot._selfAccepted||d.hot._selfInvalidated)){if(d.hot._selfDeclined)return{type:"self-declined",chain:l,moduleId:a};if(d.hot._main)return{type:"unaccepted",chain:l,moduleId:a};for(var s=0;s<d.parents.length;s++){var u=d.parents[s],p=o.c[u];if(p){if(p.hot._declinedDependencies[a])return{type:"declined",chain:l.concat([u]),moduleId:a,parentId:u};-1===n.indexOf(u)&&(p.hot._acceptedDependencies[a]?(t[u]||(t[u]=[]),c(t[u],[a])):(delete t[u],n.push(u),r.push({chain:l.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:n,outdatedDependencies:t}}function c(e,n){for(var t=0;t<n.length;t++){var r=n[t];-1===e.indexOf(r)&&e.push(r)}}o.f&&delete o.f.jsonpHmr,n=void 0;var d={},s=[],u={},p=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var A in t)if(o.o(t,A)){var f,g=t[A],y=!1,m=!1,h=!1,b="";switch((f=g?l(A):{type:"disposed",moduleId:A}).chain&&(b="\nUpdate propagation: "+f.chain.join(" -> ")),f.type){case"self-declined":e.onDeclined&&e.onDeclined(f),e.ignoreDeclined||(y=new Error("Aborted because of self decline: "+f.moduleId+b));break;case"declined":e.onDeclined&&e.onDeclined(f),e.ignoreDeclined||(y=new Error("Aborted because of declined dependency: "+f.moduleId+" in "+f.parentId+b));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(f),e.ignoreUnaccepted||(y=new Error("Aborted because "+A+" is not accepted"+b));break;case"accepted":e.onAccepted&&e.onAccepted(f),m=!0;break;case"disposed":e.onDisposed&&e.onDisposed(f),h=!0;break;default:throw new Error("Unexception type "+f.type)}if(y)return{error:y};if(m)for(A in u[A]=g,c(s,f.outdatedModules),f.outdatedDependencies)o.o(f.outdatedDependencies,A)&&(d[A]||(d[A]=[]),c(d[A],f.outdatedDependencies[A]));h&&(c(s,[f.moduleId]),u[A]=p)}t=void 0;for(var v,I=[],B=0;B<s.length;B++){var x=s[B],C=o.c[x];C&&(C.hot._selfAccepted||C.hot._main)&&u[x]!==p&&!C.hot._selfInvalidated&&I.push({module:x,require:C.hot._requireSelf,errorHandler:C.hot._selfAccepted})}return{dispose:function(){var e;r.forEach((function(e){delete a[e]})),r=void 0;for(var n,t=s.slice();t.length>0;){var i=t.pop(),l=o.c[i];if(l){var c={},u=l.hot._disposeHandlers;for(B=0;B<u.length;B++)u[B].call(null,c);for(o.hmrD[i]=c,l.hot.active=!1,delete o.c[i],delete d[i],B=0;B<l.children.length;B++){var p=o.c[l.children[B]];p&&(e=p.parents.indexOf(i))>=0&&p.parents.splice(e,1)}}}for(var A in d)if(o.o(d,A)&&(l=o.c[A]))for(v=d[A],B=0;B<v.length;B++)n=v[B],(e=l.children.indexOf(n))>=0&&l.children.splice(e,1)},apply:function(n){for(var t in u)o.o(u,t)&&(o.m[t]=u[t]);for(var r=0;r<i.length;r++)i[r](o);for(var a in d)if(o.o(d,a)){var l=o.c[a];if(l){v=d[a];for(var c=[],p=[],A=[],f=0;f<v.length;f++){var g=v[f],y=l.hot._acceptedDependencies[g],m=l.hot._acceptedErrorHandlers[g];if(y){if(-1!==c.indexOf(y))continue;c.push(y),p.push(m),A.push(g)}}for(var h=0;h<c.length;h++)try{c[h].call(null,v)}catch(t){if("function"==typeof p[h])try{p[h](t,{moduleId:a,dependencyId:A[h]})}catch(r){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:a,dependencyId:A[h],error:r,originalError:t}),e.ignoreErrored||(n(r),n(t))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:a,dependencyId:A[h],error:t}),e.ignoreErrored||n(t)}}}for(var b=0;b<I.length;b++){var B=I[b],x=B.module;try{B.require(x)}catch(t){if("function"==typeof B.errorHandler)try{B.errorHandler(t,{moduleId:x,module:o.c[x]})}catch(r){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:x,error:r,originalError:t}),e.ignoreErrored||(n(r),n(t))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:x,error:t}),e.ignoreErrored||n(t)}}return s}}}self.webpackHotUpdaterecipes=(n,r,a)=>{for(var c in r)o.o(r,c)&&(t[c]=r[c],e&&e.push(c));a&&i.push(a),l[n]&&(l[n](),l[n]=void 0)},o.hmrI.jsonp=function(e,n){t||(t={},i=[],r=[],n.push(d)),o.o(t,e)||(t[e]=o.m[e])},o.hmrC.jsonp=function(e,l,s,u,p,A){p.push(d),n={},r=l,t=s.reduce((function(e,n){return e[n]=!1,e}),{}),i=[],e.forEach((function(e){o.o(a,e)&&void 0!==a[e]?(u.push(c(e,A)),n[e]=!0):n[e]=!1})),o.f&&(o.f.jsonpHmr=function(e,t){n&&o.o(n,e)&&!n[e]&&(t.push(c(e)),n[e]=!0)})},o.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(o.p+o.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),o.nc=void 0,o(399)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,